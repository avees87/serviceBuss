//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase, HttpContext } from '@angular/common/http';
import { AppConfiguration } from "read-appsettings-json";
import { environment } from 'src/environments/environment';

export const SbxApiSettings_BaseAddress = new InjectionToken<string>('SbxApiSettings.BaseAddress');

export interface ISbxApiClient {
    /**
     * @param docType (optional) 
     * @return Success
     */
    loanDocuments(loanNumber: string, docType: string | null | undefined): Observable<LoanDocDetailsListVm[]>;
    /**
     * @return Success
     */
    loanDocuments2(documentId: string, folder: string, source: string): Observable<LoanDocDetailsListVm[]>;
    /**
     * @return Success
     */
    getLoggedInUserPortfolios(): Observable<PortfolioViewVm[]>;
}

@Injectable()
export class SbxApiClient implements ISbxApiClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(SbxApiSettings_BaseAddress) baseUrl?: string) {
        this.http = http;
        console.log(`SbxApiClient ctor Inject base URL:${baseUrl}`);
        console.log(`SbxApiClient ctor AppConfiguration.Setting():${AppConfiguration.Setting().SbxApiSettings.BaseAddress}`);
        this.baseUrl = SbxApiClient.GetValidBaseUrl(baseUrl);
    }

    public static GetValidBaseUrl(baseUrl? : string) : string {
        if (baseUrl !== undefined && baseUrl !== null)
            return baseUrl;

        //baseUrl = AppConfiguration.Setting().SbxApiSettings.BaseAddress;
        baseUrl = environment.msalConfig.auth.SbxApiUrl;
        return baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param docType (optional) 
     * @return Success
     */
    loanDocuments(loanNumber: string, docType: string | null | undefined, httpContext?: HttpContext): Observable<LoanDocDetailsListVm[]> {
        let url_ = this.baseUrl + "/api/LoanDocuments/{loanNumber}/{docType}";
        if (loanNumber === undefined || loanNumber === null)
            throw new Error("The parameter 'loanNumber' must be defined.");
        url_ = url_.replace("{loanNumber}", encodeURIComponent("" + loanNumber));
        if (docType !== null && docType !== undefined)
        url_ = url_.replace("{docType}", encodeURIComponent("" + docType));
        else
            url_ = url_.replace("/{docType}", "");
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLoanDocuments(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLoanDocuments(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LoanDocDetailsListVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LoanDocDetailsListVm[]>;
        }));
    }

    protected processLoanDocuments(response: HttpResponseBase): Observable<LoanDocDetailsListVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LoanDocDetailsListVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @return Success
     */
    loanDocuments2(documentId: string, folder: string, source: string, httpContext?: HttpContext): Observable<LoanDocDetailsListVm[]> {
        let url_ = this.baseUrl + "/api/LoanDocuments/{documentId}/{folder}/{source}";
        if (documentId === undefined || documentId === null)
            throw new Error("The parameter 'documentId' must be defined.");
        url_ = url_.replace("{documentId}", encodeURIComponent("" + documentId));
        if (folder === undefined || folder === null)
            throw new Error("The parameter 'folder' must be defined.");
        url_ = url_.replace("{folder}", encodeURIComponent("" + folder));
        if (source === undefined || source === null)
            throw new Error("The parameter 'source' must be defined.");
        url_ = url_.replace("{source}", encodeURIComponent("" + source));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLoanDocuments2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLoanDocuments2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LoanDocDetailsListVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LoanDocDetailsListVm[]>;
        }));
    }

    protected processLoanDocuments2(response: HttpResponseBase): Observable<LoanDocDetailsListVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LoanDocDetailsListVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = ProblemDetails.fromJS(resultDatadefault);
            return throwException("Error", status, _responseText, _headers, resultdefault);
            }));
        }
    }

    /**
     * @return Success
     */
    getLoggedInUserPortfolios(httpContext?: HttpContext): Observable<PortfolioViewVm[]> {
        let url_ = this.baseUrl + "/api/Portfolio/UserPortfolios";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            context: httpContext,
            headers: new HttpHeaders({
                "Accept": "text/plain",
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLoggedInUserPortfolios(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLoggedInUserPortfolios(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PortfolioViewVm[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PortfolioViewVm[]>;
        }));
    }

    protected processGetLoggedInUserPortfolios(response: HttpResponseBase): Observable<PortfolioViewVm[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PortfolioViewVm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        //return _observableOf<PortfolioViewVm[]>(null as any);
        return new Observable<PortfolioViewVm[]>();
    }
}

export class LoanDocDetailsListVm implements ILoanDocDetailsListVm {
    displayName?: string | undefined;
    loanNumber?: string | undefined;
    modifiedDate?: Date | undefined;
    documentImgUrl?: string | undefined;
    listAllCopies?: string | undefined;
    documentCount?: number;
    documentId?: string | undefined;
    sourceRepository?: string | undefined;
    containerId?: string | undefined;

    constructor(data?: ILoanDocDetailsListVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displayName = _data["displayName"];
            this.loanNumber = _data["loanNumber"];
            this.modifiedDate = _data["modifiedDate"] ? new Date(_data["modifiedDate"].toString()) : <any>undefined;
            this.documentImgUrl = _data["documentImgUrl"];
            this.listAllCopies = _data["listAllCopies"];
            this.documentCount = _data["documentCount"];
            this.documentId = _data["documentId"];
            this.sourceRepository = _data["sourceRepository"];
            this.containerId = _data["containerId"];
        }
    }

    static fromJS(data: any): LoanDocDetailsListVm {
        data = typeof data === 'object' ? data : {};
        let result = new LoanDocDetailsListVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["loanNumber"] = this.loanNumber;
        data["modifiedDate"] = this.modifiedDate ? this.modifiedDate.toISOString() : <any>undefined;
        data["documentImgUrl"] = this.documentImgUrl;
        data["listAllCopies"] = this.listAllCopies;
        data["documentCount"] = this.documentCount;
        data["documentId"] = this.documentId;
        data["sourceRepository"] = this.sourceRepository;
        data["containerId"] = this.containerId;
        return data;
    }
}

export interface ILoanDocDetailsListVm {
    displayName?: string | undefined;
    loanNumber?: string | undefined;
    modifiedDate?: Date | undefined;
    documentImgUrl?: string | undefined;
    listAllCopies?: string | undefined;
    documentCount?: number;
    documentId?: string | undefined;
    sourceRepository?: string | undefined;
    containerId?: string | undefined;
}

export class PortfolioViewVm implements IPortfolioViewVm {
    client?: string | undefined;
    totalLoansString?: string | undefined;
    totalUPBString?: string | undefined;
    delinquencyCount0To29?: string | undefined;
    delinquencyCount30To59?: string | undefined;
    delinquencyCount60To89?: string | undefined;
    delinquencyCount90To119?: string | undefined;
    delinquencyCount120Plus?: string | undefined;
    foreclosureCount?: string | undefined;
    bankruptcyCount?: string | undefined;
    reoCount?: string | undefined;
    chargeOffString?: string | undefined;

    constructor(data?: IPortfolioViewVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.client = _data["client"];
            this.totalLoansString = _data["totalLoansString"];
            this.totalUPBString = _data["totalUPBString"];
            this.delinquencyCount0To29 = _data["delinquencyCount0To29"];
            this.delinquencyCount30To59 = _data["delinquencyCount30To59"];
            this.delinquencyCount60To89 = _data["delinquencyCount60To89"];
            this.delinquencyCount90To119 = _data["delinquencyCount90To119"];
            this.delinquencyCount120Plus = _data["delinquencyCount120Plus"];
            this.foreclosureCount = _data["foreclosureCount"];
            this.bankruptcyCount = _data["bankruptcyCount"];
            this.reoCount = _data["reoCount"];
            this.chargeOffString = _data["chargeOffString"];
        }
    }

    static fromJS(data: any): PortfolioViewVm {
        data = typeof data === 'object' ? data : {};
        let result = new PortfolioViewVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["client"] = this.client;
        data["totalLoansString"] = this.totalLoansString;
        data["totalUPBString"] = this.totalUPBString;
        data["delinquencyCount0To29"] = this.delinquencyCount0To29;
        data["delinquencyCount30To59"] = this.delinquencyCount30To59;
        data["delinquencyCount60To89"] = this.delinquencyCount60To89;
        data["delinquencyCount90To119"] = this.delinquencyCount90To119;
        data["delinquencyCount120Plus"] = this.delinquencyCount120Plus;
        data["foreclosureCount"] = this.foreclosureCount;
        data["bankruptcyCount"] = this.bankruptcyCount;
        data["reoCount"] = this.reoCount;
        data["chargeOffString"] = this.chargeOffString;
        return data;
    }
}

export interface IPortfolioViewVm {
    client?: string | undefined;
    totalLoansString?: string | undefined;
    totalUPBString?: string | undefined;
    delinquencyCount0To29?: string | undefined;
    delinquencyCount30To59?: string | undefined;
    delinquencyCount60To89?: string | undefined;
    delinquencyCount90To119?: string | undefined;
    delinquencyCount120Plus?: string | undefined;
    foreclosureCount?: string | undefined;
    bankruptcyCount?: string | undefined;
    reoCount?: string | undefined;
    chargeOffString?: string | undefined;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}
